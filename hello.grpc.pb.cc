// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hello.proto

#include "hello.pb.h"
#include "hello.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace hello {

static const char* HelloService_method_names[] = {
  "/hello.HelloService/SayHello",
  "/hello.HelloService/SayHelloStrict",
};

std::unique_ptr< HelloService::Stub> HelloService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< HelloService::Stub> stub(new HelloService::Stub(channel));
  return stub;
}

HelloService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(HelloService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SayHelloStrict_(HelloService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HelloService::Stub::SayHello(::grpc::ClientContext* context, const ::hello::HelloReq& request, ::hello::HelloResp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hello::HelloResp>* HelloService::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::hello::HelloReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::hello::HelloResp>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::Status HelloService::Stub::SayHelloStrict(::grpc::ClientContext* context, const ::hello::HelloReq& request, ::hello::HelloResp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SayHelloStrict_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hello::HelloResp>* HelloService::Stub::AsyncSayHelloStrictRaw(::grpc::ClientContext* context, const ::hello::HelloReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::hello::HelloResp>(channel_.get(), cq, rpcmethod_SayHelloStrict_, context, request);
}

HelloService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      HelloService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< HelloService::Service, ::hello::HelloReq, ::hello::HelloResp>(
          std::mem_fn(&HelloService::Service::SayHello), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      HelloService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< HelloService::Service, ::hello::HelloReq, ::hello::HelloResp>(
          std::mem_fn(&HelloService::Service::SayHelloStrict), this)));
}

HelloService::Service::~Service() {
}

::grpc::Status HelloService::Service::SayHello(::grpc::ServerContext* context, const ::hello::HelloReq* request, ::hello::HelloResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HelloService::Service::SayHelloStrict(::grpc::ServerContext* context, const ::hello::HelloReq* request, ::hello::HelloResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hello

